package com.imanage.util;

public enum SMSErrorCodes {
	MISSING_USERID("-1","MISSING USERID"), MISSING_PASSWORD("-2","MISSING PASSWORD"), RESERVED("-3","RESERVED"),
	MISSING_SENDER("-4","MISSING SENDER"), MISSING_MOBILENUMBER("-5","MISSING MOBILENUMBER"),
	MISSING_MESSAGETEXT("-6","MISSING MESSAGETEXT"), AUTHENTICATION_FAILED("-7","AUTHENTICATION FAILED"),
	CONTENT_NOT_ALLOWED("-8","CONTENT NOT ALLOWED"),MALFORMED_XML_DATA_RECEIVED("-9","MALFORMED XML DATA RECEIVED"),
	INVALID_SENDER_OR_ROUTE("-10","INVALID SENDER OR ROUTE"), MOBILE_NUMBER_IN_DND("-11","MOBILE NUMBER IN DND"), 
	CREDIT_NOT_AVAILABLE("-12","CREDIT NOT AVAILABLE"),FLOOD_NOT_SUFFICIENT("-13","FLOOD NOT SUFFICIENT"),
	APP_INTERNAL_ERROR("-14","APP INTERNAL ERROR"), USER_ACCOUNT_LOCKED("-16","USER ACCOUNT LOCKED"), 
	INVALID_ROUTE_ID("-17","INVALID ROUTE ID"),INVALID_ROUTE_OR_SENDER_ID_MAPPING("-18","INVALID ROUTE OR SENDER ID MAPPING"),
	ROUTE_OR_SENDER_ID_NOT_APPROVED("-19","ROUTE OR SENDER ID NOT APPROVED"), UNKNOWN_ERROR("0", "UNKNOWN ERROR");
	String id;
	String explaination;
	private SMSErrorCodes(String id, String explaination) {
		this.id = id;
		this.explaination = explaination;
	}
	
	public static SMSErrorCodes getSMSErrorCodeMeaning(String id){
		SMSErrorCodes smsErrorCode = null;
		for(SMSErrorCodes errorCode : SMSErrorCodes.values()){
			if(errorCode.explaination.equals(id)){
				return errorCode;
			}
		}
		return smsErrorCode;
	}
}
